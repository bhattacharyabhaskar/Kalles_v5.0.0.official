<script>
document.addEventListener("DOMContentLoaded", function () {
  const atcForm = document.querySelector('form[action="/cart/add"]');
  if (!atcForm) {
    console.warn("üß© No ATC form found");
    return;
  }

  const atcButton = atcForm.querySelector('button[type="submit"]');
  const debugPrefix = "üß© ADDON:";

  function removeOldAddonInputs() {
    atcForm.querySelectorAll(".addon-dynamic").forEach(el => el.remove());
    console.log(`${debugPrefix} Removed old hidden addon inputs`);
  }

  function injectAddonInputs() {
    removeOldAddonInputs();
    const selected = document.querySelectorAll(".addon-checkbox:checked");

    console.log(`üì¶ Add-ons selected: ${selected.length}`);

    selected.forEach((checkbox) => {
      const variantId = checkbox.dataset.variantId;
      if (!variantId) return;
      console.log(`${debugPrefix} Injecting addon variant ${variantId}`);

      const idInput = document.createElement("input");
      idInput.type = "hidden";
      idInput.name = "items[][id]";
      idInput.value = variantId;
      idInput.classList.add("addon-dynamic");

      const qtyInput = document.createElement("input");
      qtyInput.type = "hidden";
      qtyInput.name = "items[][quantity]";
      qtyInput.value = "1";
      qtyInput.classList.add("addon-dynamic");

      atcForm.appendChild(idInput);
      atcForm.appendChild(qtyInput);
    });
  }

  atcForm.addEventListener("submit", async function (e) {
    e.preventDefault();
    console.log("üñ±Ô∏è ATC button clicked, preparing form...");

    const parentVariantId =
      window.product?.selected_or_first_available_variant?.id ||
      window.meta?.product?.variants?.[0]?.id ||
      ShopifyAnalytics?.meta?.selectedVariantId;

    if (!parentVariantId) {
      console.warn("‚ö†Ô∏è Parent Variant ID not found");
      injectAddonInputs();
      atcForm.submit();
      return;
    }

    try {
      console.log("üßπ Checking cart for duplicates...");
      const cart = await fetch('/cart.js').then(res => res.json());
      const updates = {};
      cart.items.forEach(item => {
        const linked = item.properties?.['Linked to Saree'];
        if (item.variant_id == parentVariantId || linked == parentVariantId) {
          updates[item.key] = 0;
          console.log(`üßπ Marking for removal ‚Üí ${item.key}: ${item.title}`);
        }
      });

      if (Object.keys(updates).length > 0) {
        console.log("üîÅ Sending update.js call to remove duplicates...");
        await fetch('/cart/update.js', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ updates })
        });
        console.log("‚úÖ Old instances removed. Waiting briefly...");
        await new Promise(res => setTimeout(res, 300));
      } else {
        console.log("‚úÖ No old instances to remove.");
      }
    } catch (err) {
      console.error("‚ùå Error during cart cleanup:", err);
    }

    injectAddonInputs();

    // üîÑ Submit via AJAX instead of native form
    const formData = new FormData(atcForm);
    try {
      const res = await fetch('/cart/add.js', {
        method: 'POST',
        body: formData,
      });
      const json = await res.json();
      console.log("‚úÖ Items added to cart via AJAX:", json);

      if (window.HDT && typeof window.HDT.openCartDrawer === "function") {
        console.log("üõí Opening drawer via window.HDT.openCartDrawer()");
        window.HDT.openCartDrawer();
      } else {
        console.warn("‚ö†Ô∏è Drawer function not found, staying on page.");
      }
    } catch (err) {
      console.error("‚ùå Failed to add items via AJAX", err);
    }
  });

  // Extra safety net in case your theme takes over on button click
  atcButton?.addEventListener("click", function () {
    console.log("üñ±Ô∏è Button clicked, injecting add-ons");
    injectAddonInputs();
  });
});
</script>
