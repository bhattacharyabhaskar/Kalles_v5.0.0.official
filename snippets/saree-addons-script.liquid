<script>
document.addEventListener("DOMContentLoaded", function () {
  const atcForm = document.querySelector('form[action="/cart/add"]');
  if (!atcForm) {
    console.warn("üß© No ATC form found");
    return;
  }

  const atcButton = atcForm.querySelector('button[type="submit"]');
  const atcTextSpan = atcButton?.querySelector('.hdt-btn-atc_text');
  const debugPrefix = "üß© ADDON:";

  // üÜï Track default button state
  const defaultBtnText = atcTextSpan?.textContent.trim() || "Add to Cart";
  const withAddonsText = "Add to Cart with Add-ons";
  const defaultBg = atcButton?.style.backgroundColor || "";
  const addonBg = "#8A1253"; // ‚Üê Customize this highlight color

  function updateAtcVisualState() {
    const anyAddonsChecked = document.querySelectorAll(".addon-checkbox:checked").length > 0;

    if (atcTextSpan) {
      atcTextSpan.textContent = anyAddonsChecked ? withAddonsText : defaultBtnText;
    }

    atcButton.style.backgroundColor = anyAddonsChecked ? addonBg : "";
    atcButton.style.color = anyAddonsChecked ? "#fff" : "";
  }

  // üß© Set up listener for add-on toggles
  document.querySelectorAll(".addon-checkbox").forEach(checkbox => {
    checkbox.addEventListener("change", updateAtcVisualState);
  });

  function removeOldAddonInputs() {
    atcForm.querySelectorAll(".addon-dynamic").forEach(el => el.remove());
    console.log("üß© ADDON: Removed old hidden addon inputs");
  }

  function injectAddonInputs(parentVariantId) {
    removeOldAddonInputs();
    const selected = document.querySelectorAll(".addon-checkbox:checked");
    console.log(`üì¶ Add-ons selected: ${selected.length}`);

    selected.forEach((checkbox) => {
      const variantId = checkbox.dataset.variantId;
      if (!variantId) return;
      console.log(`${debugPrefix} Injecting addon variant ${variantId}`);

      const idInput = document.createElement("input");
      idInput.type = "hidden";
      idInput.name = "items[][id]";
      idInput.value = variantId;
      idInput.classList.add("addon-dynamic");

      const qtyInput = document.createElement("input");
      qtyInput.type = "hidden";
      qtyInput.name = "items[][quantity]";
      qtyInput.value = "1";
      qtyInput.classList.add("addon-dynamic");

      const propInput = document.createElement("input");
      propInput.type = "hidden";
      propInput.name = "items[][properties][Linked to Saree]";
      propInput.value = parentVariantId;
      propInput.classList.add("addon-dynamic");

      atcForm.appendChild(idInput);
      atcForm.appendChild(qtyInput);
      atcForm.appendChild(propInput);
    });
  }

  atcForm.addEventListener("submit", async function (e) {
    e.preventDefault();
    console.log("üñ±Ô∏è ATC button clicked, preparing form...");

    const parentVariantId =
      window.product?.selected_or_first_available_variant?.id ||
      window.meta?.product?.variants?.[0]?.id ||
      ShopifyAnalytics?.meta?.selectedVariantId;

    if (!parentVariantId) {
      console.warn("‚ö†Ô∏è Parent Variant ID not found");
      return;
    }
    console.log(`üß© Parent Variant ID to remove: ${parentVariantId}`);

    let hadRemovals = false;

    try {
      console.log("üßπ Checking cart for duplicates...");
      const cart = await fetch('/cart.js').then(res => res.json());
      const updates = {};

      cart.items.forEach(item => {
        const linked = item.properties?.['Linked to Saree'];
        const match = item.variant_id == parentVariantId || linked == parentVariantId;
        console.log(`üîç Checking item: ${item.title} | variant: ${item.variant_id} | linked: ${linked} | match: ${match}`);
        if (match) {
          updates[item.key] = 0;
          hadRemovals = true;
          console.log(`üßπ Marking for removal ‚Üí ${item.key}: ${item.title}`);
        }
      });

      if (Object.keys(updates).length > 0) {
        console.log("üîÅ Sending update.js call to remove duplicates...");
        await fetch('/cart/update.js', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ updates })
        });
        console.log("‚úÖ Old instances removed. Waiting briefly...");
        await new Promise(res => setTimeout(res, 300));
      } else {
        console.log("‚úÖ No old instances to remove.");
      }
    } catch (err) {
      console.error("‚ùå Error cleaning cart:", err);
    }

    injectAddonInputs(parentVariantId);

    // ‚úÖ Custom FormData to ensure parent is added LAST (so appears FIRST in cart)
    const formData = new FormData();
    document.querySelectorAll(".addon-dynamic").forEach(input => {
      formData.append(input.name, input.value);
    });

    // Add parent product at the end
    const parentIdInput = atcForm.querySelector('input[name="id"]');
    const parentQtyInput = atcForm.querySelector('input[name="quantity"]');

    if (parentIdInput) {
      formData.append("items[][id]", parentIdInput.value);
      formData.append("items[][quantity]", parentQtyInput?.value || "1");
    }

    try {
      const response = await fetch('/cart/add.js', {
        method: 'POST',
        body: formData,
        headers: { 'Accept': 'application/json' }
      });

      const result = await response.json();
      console.log("‚úÖ Items added to cart via AJAX:", result);

      if (hadRemovals) {
        console.log("üîÅ Redirecting to cart because old items were removed.");
        window.location.href = "/cart";
      }
    } catch (err) {
      console.error("‚ùå Error adding items to cart:", err);
    }
  });

  atcButton?.addEventListener("click", function () {
    console.log("üñ±Ô∏è Button clicked, injecting add-ons");
    const parentVariantId =
      window.product?.selected_or_first_available_variant?.id ||
      window.meta?.product?.variants?.[0]?.id ||
      ShopifyAnalytics?.meta?.selectedVariantId;

    if (!parentVariantId) return;

    injectAddonInputs(parentVariantId);
  });
});
</script>
