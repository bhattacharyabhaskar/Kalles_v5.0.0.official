<script>
document.addEventListener("DOMContentLoaded", function () {
  const parentVariantId =
    window.product?.selected_or_first_available_variant?.id?.toString() ||
    window.meta?.product?.variants?.[0]?.id?.toString() ||
    ShopifyAnalytics?.meta?.selectedVariantId?.toString();

  const form = document.querySelector('form[action="/cart/add"]') || document.querySelector('form[data-type="add-to-cart-form"]');
  const submitButton = form?.querySelector('button[type="submit"]');

  if (!form || !submitButton || !parentVariantId) return;

  // Create floating ATC button
  const floatingBtn = submitButton.cloneNode(true);
  floatingBtn.removeAttribute("id");
  floatingBtn.id = "floating-atc-btn";
  floatingBtn.textContent = submitButton.textContent;

  Object.assign(floatingBtn.style, {
    backgroundColor: "#5b1a1a",
    color: "#ffffff",
    fontSize: "14px",
    fontWeight: "600",
    fontFamily: "Poppins",
    borderRadius: "40px",
    padding: "5px 25px",
    textTransform: "uppercase",
    border: "none",
    width: "90%",
    maxWidth: "570px",
    height: "40px",
    display: "none",
    position: "fixed",
    bottom: "20px",
    left: "50%",
    transform: "translateX(-50%)",
    zIndex: "9999",
    boxShadow: "0 4px 12px rgba(0, 0, 0, 0.25)",
    cursor: "pointer",
    transition: "background-color 0.3s ease"
  });

  floatingBtn.addEventListener("mouseenter", () => floatingBtn.style.backgroundColor = "#a03e87");
  floatingBtn.addEventListener("mouseleave", () => floatingBtn.style.backgroundColor = "#5b1a1a");

  document.body.appendChild(floatingBtn);

  function toggleFloatingButton() {
    const isMobile = window.innerWidth <= 767;
    if (!isMobile) {
      floatingBtn.style.display = "none";
      return;
    }

    const rect = submitButton.getBoundingClientRect();
    const isInViewport = rect.top >= 0 && rect.bottom <= window.innerHeight;

    floatingBtn.style.display = (!isInViewport && window.scrollY > 300) ? "flex" : "none";
  }

  let scrollTimeout;
  window.addEventListener("scroll", () => {
    if (!scrollTimeout) {
      scrollTimeout = setTimeout(() => {
        toggleFloatingButton();
        scrollTimeout = null;
      }, 100);
    }
  });

  function updateATCButtonText() {
    const anyChecked = document.querySelectorAll('.addon-checkbox:checked').length > 0;
    const label = anyChecked ? 'Add to Cart with Add-ons' : 'Add to Cart';
    submitButton.innerText = label;
    floatingBtn.innerText = label;
  }

  document.querySelectorAll('.js-addon-box').forEach(box => {
    const checkbox = box.querySelector('.addon-checkbox');

    box.addEventListener('click', function (e) {
      if (e.target.tagName !== 'INPUT') {
        checkbox.checked = !checkbox.checked;
        box.classList.toggle('selected', checkbox.checked);
        updateATCButtonText();
      }
    });

    checkbox.addEventListener('click', function (e) {
      e.stopPropagation();
      box.classList.toggle('selected', checkbox.checked);
      updateATCButtonText();
    });
  });

  async function handleAddToCart(e) {
    e.preventDefault();
    e.stopPropagation();

    submitButton.disabled = true;
    floatingBtn.disabled = true;
    submitButton.innerText = 'Adding...';
    floatingBtn.innerText = 'Adding...';

    const checkedAddons = Array.from(document.querySelectorAll('.addon-checkbox:checked'))
      .map(cb => cb.getAttribute('data-variant-id'))
      .filter(Boolean);

    try {
      const cart = await fetch('/cart.js').then(res => res.json());
      const updates = {};
      cart.items.forEach(item => {
        const linked = item.properties?.['Linked to Saree'];
        if (item.variant_id == parentVariantId || linked == parentVariantId) {
          updates[item.key] = 0;
        }
      });

      if (Object.keys(updates).length > 0) {
        await fetch('/cart/update.js', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ updates, sections: "cart_data,mini_cart" })
        });
        await new Promise(resolve => setTimeout(resolve, 300));
      }

      const itemsToAdd = [
        ...checkedAddons.map(id => ({
          id,
          quantity: 1,
          properties: { "Linked to Saree": parentVariantId }
        })),
        {
          id: parentVariantId,
          quantity: 1
        }
      ];

      const addRes = await fetch("/cart/add.js", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ items: itemsToAdd })
      });

      if (!addRes.ok) throw new Error("❌ Failed to add items");

      // ✅ NEW drawer refresh & open logic (ThemeEvents-based)
      const sectionId = 'cart_drawer'; // Manually set based on your theme

      const res = await fetch(`/cart?section_id=${sectionId}`);
      const html = await res.text();
      const sections = {};
      sections[sectionId] = html;

      document.dispatchEvent(new CustomEvent(ThemeEvents.Update, {
        detail: {
          cartData: { sections },
          source: 'product-form-component',
          actionAfterATC: 'open_cart_drawer'
        }
      }));

      console.log("✅ cartUpdate event dispatched to open drawer");

    } catch (err) {
      console.error("❌ Cart Update Error:", err);
      alert("Something went wrong. Please try again.");
    } finally {
      submitButton.disabled = false;
      floatingBtn.disabled = false;
      updateATCButtonText();
    }
  }

  submitButton.addEventListener("click", handleAddToCart);
  floatingBtn.addEventListener("click", handleAddToCart);
});
</script>
