<script>
document.addEventListener("DOMContentLoaded", function () {
  const atcButton = document.querySelector('.ivy-addons-atc-btn');
  const atcForm = document.querySelector('form.t4s-form__product');

  if (!atcButton || !atcForm) return;

  atcButton.addEventListener('click', function (e) {
    e.preventDefault();
    console.log('🖱️ Button clicked, injecting add-ons');

    // Clean old hidden addon inputs
    atcForm.querySelectorAll('.ivy-hidden-addon').forEach(el => el.remove());
    console.log('🧩 ADDON: Removed old hidden addon inputs');

    // Gather selected add-ons
    const selectedAddons = Array.from(document.querySelectorAll('.ivy-upsell-checkbox:checked'))
      .map(cb => cb.getAttribute('data-variant-id'));
    console.log(`📦 Add-ons selected: ${selectedAddons.length}`);

    selectedAddons.forEach(variantId => {
      console.log('🧩 ADDON: Injecting addon variant', variantId);
      const input = document.createElement('input');
      input.type = 'hidden';
      input.name = 'properties[Linked Addon Variant ID]';
      input.value = variantId;
      input.className = 'ivy-hidden-addon';
      atcForm.appendChild(input);
    });

    // Remove old instances of the parent or its add-ons
    removeDuplicateItems(function () {
      const formData = new FormData(atcForm);
      fetch('/cart/add.js', {
        method: 'POST',
        body: formData
      })
      .then(response => {
        if (!response.ok) throw new Error('Add to cart failed');
        return response.json();
      })
      .then(item => {
        console.log('✅ Items added to cart via AJAX:', item);
        if (window.theme?.functions?.openCartDrawer) {
          window.theme.functions.openCartDrawer();
        } else {
          console.warn('⚠️ Drawer function not found, staying on page.');
        }
      })
      .catch(error => {
        console.error('❌ Error adding to cart:', error);
      });
    });
  });

  function removeDuplicateItems(callback) {
    // Fallback-safe parent variant ID
    let parentVariantId = window.product?.selected_or_first_available_variant?.id;

    if (!parentVariantId) {
      const fallbackInput = atcForm.querySelector('input[name="id"]');
      if (fallbackInput) {
        parentVariantId = fallbackInput.value;
        console.warn("⚠️ Fallback to hidden input for parent variant ID:", parentVariantId);
      } else {
        console.warn("⚠️ Could not determine parent variant ID.");
        callback();
        return;
      }
    }
    console.log('🧩 Parent Variant ID to remove:', parentVariantId);

    fetch('/cart.js')
      .then(res => res.json())
      .then(cart => {
        const updates = {};
        console.log('🧹 Checking cart for duplicates...');

        cart.items.forEach(item => {
          const linkedTo = item.properties?.['Linked to Saree'];
          const variantId = item.variant_id;
          const key = item.key;
          const isParent = variantId == parentVariantId;
          const isAddon = linkedTo == parentVariantId;

          console.log(`🔍 Checking item: ${item.product_title} | variant: ${variantId} | linked: ${linkedTo} | match: ${isParent || isAddon}`);

          if (isParent || isAddon) {
            updates[key] = 0;
            console.log(`🧹 Marking for removal → ${key}: ${item.product_title}`);
          }
        });

        if (Object.keys(updates).length === 0) {
          console.log('✅ No old instances to remove.');
          callback();
          return;
        }

        console.log('🔁 Sending update.js call to remove duplicates...');
        fetch('/cart/update.js', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ updates })
        })
        .then(res => res.json())
        .then(cart => {
          console.log('✅ Old instances removed. Waiting briefly...');
          setTimeout(callback, 300);
        });
      });
  }
});
</script>
