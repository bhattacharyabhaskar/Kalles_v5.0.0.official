<script>
document.addEventListener("DOMContentLoaded", function () {
  const parentVariantId =
    window.product?.selected_or_first_available_variant?.id?.toString() ||
    window.meta?.product?.variants?.[0]?.id?.toString() ||
    ShopifyAnalytics?.meta?.selectedVariantId?.toString();

  const form = document.querySelector('form[action="/cart/add"]') || document.querySelector('form[data-type="add-to-cart-form"]');
  const submitButton = form?.querySelector('button[type="submit"]');

  if (!form || !submitButton || !parentVariantId) return;

  // Create floating ATC button
  const floatingBtn = submitButton.cloneNode(true);
  floatingBtn.removeAttribute("id");
  floatingBtn.id = "floating-atc-btn";
  floatingBtn.textContent = submitButton.textContent;

  Object.assign(floatingBtn.style, {
    backgroundColor: "#5b1a1a",
    color: "#ffffff",
    fontSize: "14px",
    fontWeight: "600",
    fontFamily: "Poppins",
    borderRadius: "40px",
    padding: "5px 25px",
    textTransform: "uppercase",
    border: "none",
    width: "90%",
    maxWidth: "570px",
    height: "40px",
    display: "none",
    position: "fixed",
    bottom: "20px",
    left: "50%",
    transform: "translateX(-50%)",
    zIndex: "9999",
    boxShadow: "0 4px 12px rgba(0, 0, 0, 0.25)",
    cursor: "pointer",
    transition: "background-color 0.3s ease"
  });

  floatingBtn.addEventListener("mouseenter", () => floatingBtn.style.backgroundColor = "#a03e87");
  floatingBtn.addEventListener("mouseleave", () => floatingBtn.style.backgroundColor = "#5b1a1a");

  document.body.appendChild(floatingBtn);

  function toggleFloatingButton() {
    const isMobile = window.innerWidth <= 767;
    if (!isMobile) {
      floatingBtn.style.display = "none";
      return;
    }

    const rect = submitButton.getBoundingClientRect();
    const isInViewport = rect.top >= 0 && rect.bottom <= window.innerHeight;

    floatingBtn.style.display = (!isInViewport && window.scrollY > 300) ? "flex" : "none";
  }

  // Throttled scroll listener
  let scrollTimeout;
  window.addEventListener("scroll", () => {
    if (!scrollTimeout) {
      scrollTimeout = setTimeout(() => {
        toggleFloatingButton();
        scrollTimeout = null;
      }, 100);
    }
  });

  function updateATCButtonText() {
    const anyChecked = document.querySelectorAll('.addon-checkbox:checked').length > 0;
    const label = anyChecked ? 'Add to Cart with Add-ons' : 'Add to Cart';
    submitButton.innerText = label;
    floatingBtn.innerText = label;
  }

  // Make entire add-on box toggle checkbox
  document.querySelectorAll('.js-addon-box').forEach(box => {
    const checkbox = box.querySelector('.addon-checkbox');

    box.addEventListener('click', function (e) {
      if (e.target.tagName !== 'INPUT') {
        checkbox.checked = !checkbox.checked;
        box.classList.toggle('selected', checkbox.checked);
        updateATCButtonText();
      }
    });

    checkbox.addEventListener('click', function (e) {
      e.stopPropagation();
      box.classList.toggle('selected', checkbox.checked);
      updateATCButtonText();
    });
  });

  async function handleAddToCart(e) {
  e.preventDefault();
  e.stopPropagation();

  submitButton.disabled = true;
  floatingBtn.disabled = true;
  submitButton.innerText = 'Adding...';
  floatingBtn.innerText = 'Adding...';

  try {
    // Get selected add-ons
    const checkedAddons = Array.from(document.querySelectorAll('.addon-checkbox:checked'))
      .map(cb => cb.getAttribute('data-variant-id'))
      .filter(Boolean);

    // Get the form and prepare FormData
    const form = document.querySelector('form[action="/cart/add"]');
    const formData = new FormData(form);

    // Clear out any default 'id' field if present (we'll add our own)
    formData.delete('id');

    // Add parent product
    formData.append('items[0][id]', parentVariantId);
    formData.append('items[0][quantity]', 1);

    // Add add-ons
    checkedAddons.forEach((addonId, index) => {
      const i = index + 1;
      formData.append(`items[${i}][id]`, addonId);
      formData.append(`items[${i}][quantity]`, 1);
      formData.append(`items[${i}][properties][Linked to Saree]`, parentVariantId);
    });

    // Native Shopify add endpoint — triggers Kalles' drawer logic
    const response = await fetch('/cart/add', {
      method: 'POST',
      body: formData,
    });

    if (!response.ok) throw new Error("❌ Failed to add items");

    console.log("✅ Added to cart via native method. Drawer should open.");

  } catch (err) {
    console.error("❌ Cart add failed:", err);
    alert("Something went wrong. Please try again.");
  } finally {
    submitButton.disabled = false;
    floatingBtn.disabled = false;
    updateATCButtonText();
  }
}

  submitButton.addEventListener("click", handleAddToCart);
  floatingBtn.addEventListener("click", handleAddToCart);
});
</script>
