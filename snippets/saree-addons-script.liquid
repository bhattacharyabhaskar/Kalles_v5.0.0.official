<script>
document.addEventListener("DOMContentLoaded", function () {
  const atcForm = document.querySelector('form[action="/cart/add"]');
  if (!atcForm) {
    console.warn("üß© No ATC form found");
    return;
  }

  const atcButton = atcForm.querySelector('button[type="submit"]');
  const debugPrefix = "üß© ADDON:";

  function removeOldAddonInputs() {
    atcForm.querySelectorAll(".addon-dynamic").forEach(el => el.remove());
    console.log(`${debugPrefix} Removed old hidden addon inputs`);
  }

  function injectAddonInputs() {
    removeOldAddonInputs();
    const selected = document.querySelectorAll(".addon-checkbox:checked");

    console.log(`üì¶ Add-ons selected: ${selected.length}`);

    selected.forEach((checkbox) => {
      const variantId = checkbox.dataset.variantId;
      if (!variantId) return;
      console.log(`${debugPrefix} Injecting addon variant ${variantId}`);

      const idInput = document.createElement("input");
      idInput.type = "hidden";
      idInput.name = "items[][id]";
      idInput.value = variantId;
      idInput.classList.add("addon-dynamic");

      const qtyInput = document.createElement("input");
      qtyInput.type = "hidden";
      qtyInput.name = "items[][quantity]";
      qtyInput.value = "1";
      qtyInput.classList.add("addon-dynamic");

      atcForm.appendChild(idInput);
      atcForm.appendChild(qtyInput);
    });
  }

  async function removeDuplicateItems(callback) {
    console.log("üßπ Checking cart for duplicates...");

    const res = await fetch('/cart.js');
    const cart = await res.json();
    const parentVariantId = window.product?.selected_or_first_available_variant?.id;

    if (!parentVariantId) {
      console.warn("‚ö†Ô∏è Could not determine parent variant ID.");
      callback();
      return;
    }

    console.log(`üß© Parent Variant ID to remove: ${parentVariantId}`);

    const itemsToRemove = [];

    cart.items.forEach(item => {
      const linked = item.properties?.['Linked to Saree'];
      const match = (linked == parentVariantId || item.variant_id == parentVariantId);

      console.log(`üîç Checking item: ${item.product_title} | variant: ${item.variant_id} | linked: ${linked} | match: ${match}`);

      if (match) {
        console.log(`üßπ Marking for removal ‚Üí ${item.key}: ${item.product_title}`);
        itemsToRemove.push({ id: item.key, quantity: 0 });
      }
    });

    if (itemsToRemove.length > 0) {
      console.log("üîÅ Sending update.js call to remove duplicates...");
      await fetch('/cart/update.js', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ updates: Object.fromEntries(itemsToRemove.map(i => [i.id, 0])) })
      });
      console.log("‚úÖ Old instances removed. Waiting briefly...");
      setTimeout(callback, 300); // wait before adding new items
    } else {
      console.log("‚úÖ No old instances to remove.");
      callback();
    }
  }

  function finalSubmitHandler(e) {
    e.preventDefault();
    console.log("üñ±Ô∏è Button clicked, injecting add-ons");

    injectAddonInputs();

    removeDuplicateItems(() => {
      const formData = new FormData(atcForm);

      fetch('/cart/add.js', {
        method: 'POST',
        body: formData
      })
        .then(res => res.json())
        .then(data => {
          console.log("‚úÖ Items added to cart via AJAX:", data);

          // ‚úÖ Attempt to open cart drawer
          setTimeout(() => {
            let drawerOpened = false;

            // Preferred method
            if (window.Shopify && typeof window.Shopify.openCartDrawer === 'function') {
              console.log("üõí Opening drawer via Shopify.openCartDrawer()");
              window.Shopify.openCartDrawer();
              drawerOpened = true;
            }

            // Fallback 1: Kalles v5 (HALO)
            else if (window.HALO && HALO.cart && typeof HALO.cart.getCart === 'function') {
              console.log("üõí Opening drawer via HALO.cart.getCart()");
              HALO.cart.getCart();
              drawerOpened = true;
            }

            // Fallback 2: Click cart icon manually
            else {
              const drawerToggle = document.querySelector('.js-toggle-cart-sidebar, .t4s-btn-cart, [data-cart-sidebar-toggle]');
              if (drawerToggle) {
                console.log("üõí Opening drawer via simulated click");
                drawerToggle.click();
                drawerOpened = true;
              }
            }

            if (!drawerOpened) {
              console.warn("‚ö†Ô∏è Drawer function not found, staying on page.");
            }
          }, 250);
        });
    });
  }

  atcForm.addEventListener("submit", finalSubmitHandler);
  atcButton?.addEventListener("click", finalSubmitHandler);
});
</script>
