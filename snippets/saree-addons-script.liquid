<script>
/* ------------------  Saree Add-ons helper – v1.0  ------------------ */
document.addEventListener('DOMContentLoaded', () => {
  /* ------------------------------------------------------------------
     0.  Grab the important DOM nodes once
  ------------------------------------------------------------------ */
  const form =
    document.querySelector('form.hdt-main-product-form')          // main product form
    || document.querySelector('form.hdt-product-form-fbt');       // FBT/bundle form

  if (!form) { console.warn('⚠️  Add-on script: form not found'); return; }

  const submitBtn   = form.querySelector('button[type="submit"]');
  const floatingBtn = createFloatingClone(submitBtn);             // △ helper below

  const PARENT_VARIANT_ID =
    form.querySelector('input[name="id"]')?.value ||
    window.product?.selected_or_first_available_variant?.id;

  if (!PARENT_VARIANT_ID) { console.error('❌ Parent variant not found'); return; }

  console.log('🛠  Add-on script initialised | ParentVariant:', PARENT_VARIANT_ID);

  /* ------------------------------------------------------------------
     1.  Handle add-on checkbox UI
  ------------------------------------------------------------------ */
  const addonBoxes = Array.from(document.querySelectorAll('.js-addon-box'));

  addonBoxes.forEach(box => {
    const cb = box.querySelector('.addon-checkbox');

    // click anywhere on box toggles
    box.addEventListener('click', evt => {
      if (evt.target.tagName !== 'INPUT') cb.checked = !cb.checked;
      box.classList.toggle('selected', cb.checked);
      updateButtonLabels();
    });

    // direct click on checkbox (stop bubbling)
    cb.addEventListener('click', evt => {
      evt.stopPropagation();
      box.classList.toggle('selected', cb.checked);
      updateButtonLabels();
    });
  });

  /* ------------------------------------------------------------------
     2.  Inject property & let the form POST normally
  ------------------------------------------------------------------ */
  form.addEventListener('submit', evt => {
    // QUICK check – if no add-on selected, nothing special to do.
    const checkedAddons = addonBoxes
      .filter(b => b.querySelector('.addon-checkbox').checked
                && !b.querySelector('.addon-checkbox').disabled);

    if (checkedAddons.length === 0) {
      console.log('➡️ No add-ons selected → letting default ATC run');
      return;   // let theme handle everything
    }

    console.log('📦 Add-ons selected:', checkedAddons.length);

    // First remove any stale inputs from earlier attempts
    form.querySelectorAll('input[name$="[properties][Linked to Saree]"]').forEach(n => n.remove());

    // For each checked add-on, append the Linked to Saree property
    checkedAddons.forEach(box => {
      const hiddenInput       = document.createElement('input');
      hiddenInput.type        = 'hidden';
      hiddenInput.name        = 'items[][properties][Linked to Saree]';
      hiddenInput.value       = PARENT_VARIANT_ID;
      form.appendChild(hiddenInput);
    });

    console.log('✅ Properties injected, form will POST normally');
    // do NOT preventDefault — theme’s JS will submit,
    // open drawer, refresh count, etc.
  });

  /* ------------------------------------------------------------------
     3.  Helpers
  ------------------------------------------------------------------ */
  function updateButtonLabels() {
    const anyChecked = form.querySelectorAll('.addon-checkbox:checked').length > 0;
    const label      = anyChecked ? 'Add to Cart with Add-ons' : 'Add to Cart';
    submitBtn.querySelector('.hdt-btn-atc_text').textContent = label;
    floatingBtn.textContent = label;
  }

  function createFloatingClone(srcBtn) {
    const clone = srcBtn.cloneNode(true);
    clone.id    = 'floating-atc-btn';
    clone.querySelector('.hdt-btn-atc_text')?.remove(); // remove inner span
    clone.textContent = srcBtn.textContent;             // plain text

    Object.assign(clone.style, {
      background:  '#5b1a1a', color:'#fff', fontSize:'14px', fontWeight:'600',
      fontFamily: 'Poppins', borderRadius:'40px', padding:'5px 25px',
      textTransform:'uppercase', border:'none', width:'90%', maxWidth:'570px',
      height:'40px', display:'none', position:'fixed', bottom:'20px', left:'50%',
      transform:'translateX(-50%)', zIndex:'9999', cursor:'pointer',
      boxShadow:'0 4px 12px rgba(0,0,0,.25)', transition:'background .3s'
    });
    clone.addEventListener('mouseenter',()=>clone.style.background='#a03e87');
    clone.addEventListener('mouseleave',()=>clone.style.background='#5b1a1a');

    clone.addEventListener('click', () => submitBtn.click()); // proxy click
    document.body.appendChild(clone);

    // show / hide on scroll
    window.addEventListener('scroll', throttle(() => {
      const isMobile = innerWidth <= 767;
      const rect     = srcBtn.getBoundingClientRect();
      const inView   = rect.top >= 0 && rect.bottom <= innerHeight;
      clone.style.display = isMobile && !inView && scrollY > 300 ? 'flex' : 'none';
    }, 100));
    return clone;
  }

  // simple throttle
  function throttle(fn, wait) {
    let t = null;
    return (...args) => {
      if (t) return;
      t = setTimeout(()=>{ fn(...args); t=null; }, wait);
    };
  }
});
</script>
