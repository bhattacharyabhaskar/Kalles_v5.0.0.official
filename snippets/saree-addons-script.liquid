<script>
document.addEventListener("DOMContentLoaded", function () {
  const atcForm = document.querySelector('form[action="/cart/add"]');
  if (!atcForm) {
    console.warn("🧩 No ATC form found");
    return;
  }

  const atcButton = atcForm.querySelector('button[type="submit"]');
  const debugPrefix = "🧩 ADDON:";

  function removeOldAddonInputs() {
    atcForm.querySelectorAll(".addon-dynamic").forEach(el => el.remove());
  }

  function injectAddonInputs() {
    removeOldAddonInputs();
    const selected = document.querySelectorAll(".addon-checkbox:checked");

    console.log(`📦 Add-ons selected: ${selected.length}`);

    selected.forEach((checkbox) => {
      const variantId = checkbox.dataset.variantId;
      if (!variantId) return;
      console.log(`${debugPrefix} Injecting addon variant ${variantId}`);

      const idInput = document.createElement("input");
      idInput.type = "hidden";
      idInput.name = "items[][id]";
      idInput.value = variantId;
      idInput.classList.add("addon-dynamic");

      const qtyInput = document.createElement("input");
      qtyInput.type = "hidden";
      qtyInput.name = "items[][quantity]";
      qtyInput.value = "1";
      qtyInput.classList.add("addon-dynamic");

      atcForm.appendChild(idInput);
      atcForm.appendChild(qtyInput);
    });
  }
  // Inject just before submit
  atcForm.addEventListener("submit", function () {
    injectAddonInputs();
  });

  // Also hook on button click to ensure injection happens in case theme JS takes over
  atcButton?.addEventListener("click", function () {
    injectAddonInputs();
  });
});

  function removeExistingSareeAndAddons(parentVariantId) {
  fetch('/cart.js')
    .then(res => res.json())
    .then(cart => {
      const updates = {};
      cart.items.forEach(item => {
        const isParent = item.variant_id === parentVariantId;
        const isAddon = item.properties && item.properties['Linked to Saree'] == parentVariantId;
        if (isParent || isAddon) {
          updates[item.key] = 0;
          console.log('🧹 Marking for removal:', item.key, item.title);
        }
      });

      if (Object.keys(updates).length > 0) {
        console.log('🧹 Sending cart update to remove old items...');
        return fetch('/cart/update.js', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ updates })
        }).then(() => {
          console.log('✅ Old items removed.');
        });
      } else {
        console.log('⚠️ No matching old items found.');
        return Promise.resolve(); // no-op
      }
    })
    .catch(err => {
      console.error('❌ Error removing old items', err);
    });
}

</script>
